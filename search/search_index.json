{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to LightNet \u00b6 A lightweight neural network frontend framework for different software/hardware backends. Getting Started \u00b6 Overview Installation Usage Documentation \u00b6 Project Structure Building Options Intermediate Representation Operator Description Miscellaneous Hacking \u00b6 Commit Guidelines Code Conventions","title":"Home"},{"location":"index.html#welcome-to-lightnet","text":"A lightweight neural network frontend framework for different software/hardware backends.","title":"Welcome to LightNet"},{"location":"index.html#getting-started","text":"Overview Installation Usage","title":"Getting Started"},{"location":"index.html#documentation","text":"Project Structure Building Options Intermediate Representation Operator Description Miscellaneous","title":"Documentation"},{"location":"index.html#hacking","text":"Commit Guidelines Code Conventions","title":"Hacking"},{"location":"Getting-Started.html","text":"Getting Started \u00b6 Overview \u00b6 LightNet is a lightweight neural network compiler framework for different software/hardware backends. Installation \u00b6 Requirements \u00b6 The following steps have been tested for Ubuntu 16.04 but should work with other distros as well. Most required packages can be installed using the following commands ( sudo permission may be required): apt-get install build-essential perl git pkg-config check cpan install JSON Sort::strverscmp This project also depends on TensorLight , a lightweight tensor operation library. Install it according to its repository before continuing to build LightNet. (Optional) Packages for building documents Use the following commands to install the packages for building documents: apt-get install python3-pip pip3 install mkdocs (Optional) CUDA dependency You also have to install CUDA 8.0 (or later) according to its website CUDA Toolkit if you want to build with CUDA support. Remember to put nvcc (usually in /usr/local/cuda/bin ) in environment variable PATH . (Optional) cuDNN dependency You also have to install CUDA 8.0 (or later) and cuDNN 7.0 (or later) libraries, according to their websites CUDA Toolkit and cuDNN if you want to build with cuDNN support. (Optional) TensorRT dependency You also have to install CUDA 8.0 (or later) and TensorRT 3.0 (or later) libraries, according to their websites CUDA Toolkit and TensorRT if you want to build with TensorRT support. Building and Installation \u00b6 Clone this repository to your local directory. cd <my_working_directory> git clone https://github.com/zhaozhixu/LightNet.git cd LightNet Configure and build First, configure your installation using: chmod +x configure ./configure There are options to custom your building and installation process. You can append them after ./configure . For example, use ./configure --install-dir=DIR to set the installation directory (default is /usr/local ). Use ./configure --with-cuda=yes if you want to build with CUDA support. Detailed ./configure options can be displayed using ./configure -h . After that, use make to compile the binaries, and run the test. Finally, use make install to install the build directory into the installation directory. Other make options Use make info to see other make options. Especially, you can use make clean to clean up the build directory and all object files, and make uninstall to remove installed files from the installation directory. Usage \u00b6 After compilation, use lightnet -h to learn the usage for this program, as follows. Usage: lightnet [OPTION...] SOURCE Apply compilation procedures to SOURCE according to the options. If SOURCE is -, read standard input. Options: -h, --help display this message -v, --version display version information -o, --outfile=FILE specify output file name; if FILE is -, print to standard output; if FILE is !, do not print; (default: out.json) -t, --target=TARGET specify target platform (default: cpu) -c, --compile compile only; do not run -r, --run run only; do not compile; SOURCE should have been memory-planned -Wwarn display warnings (default) -w, -Wno-warn do not display warnings -Winter display internal warnings (default) -Wno-inter do not display internal warnings -debug display debug messages (only works with LN_DEBUG defined when compiling)","title":"Getting Started"},{"location":"Getting-Started.html#getting-started","text":"","title":"Getting Started"},{"location":"Getting-Started.html#overview","text":"LightNet is a lightweight neural network compiler framework for different software/hardware backends.","title":"Overview"},{"location":"Getting-Started.html#installation","text":"","title":"Installation"},{"location":"Getting-Started.html#requirements","text":"The following steps have been tested for Ubuntu 16.04 but should work with other distros as well. Most required packages can be installed using the following commands ( sudo permission may be required): apt-get install build-essential perl git pkg-config check cpan install JSON Sort::strverscmp This project also depends on TensorLight , a lightweight tensor operation library. Install it according to its repository before continuing to build LightNet. (Optional) Packages for building documents Use the following commands to install the packages for building documents: apt-get install python3-pip pip3 install mkdocs (Optional) CUDA dependency You also have to install CUDA 8.0 (or later) according to its website CUDA Toolkit if you want to build with CUDA support. Remember to put nvcc (usually in /usr/local/cuda/bin ) in environment variable PATH . (Optional) cuDNN dependency You also have to install CUDA 8.0 (or later) and cuDNN 7.0 (or later) libraries, according to their websites CUDA Toolkit and cuDNN if you want to build with cuDNN support. (Optional) TensorRT dependency You also have to install CUDA 8.0 (or later) and TensorRT 3.0 (or later) libraries, according to their websites CUDA Toolkit and TensorRT if you want to build with TensorRT support.","title":"Requirements"},{"location":"Getting-Started.html#building-and-installation","text":"Clone this repository to your local directory. cd <my_working_directory> git clone https://github.com/zhaozhixu/LightNet.git cd LightNet Configure and build First, configure your installation using: chmod +x configure ./configure There are options to custom your building and installation process. You can append them after ./configure . For example, use ./configure --install-dir=DIR to set the installation directory (default is /usr/local ). Use ./configure --with-cuda=yes if you want to build with CUDA support. Detailed ./configure options can be displayed using ./configure -h . After that, use make to compile the binaries, and run the test. Finally, use make install to install the build directory into the installation directory. Other make options Use make info to see other make options. Especially, you can use make clean to clean up the build directory and all object files, and make uninstall to remove installed files from the installation directory.","title":"Building and Installation"},{"location":"Getting-Started.html#usage","text":"After compilation, use lightnet -h to learn the usage for this program, as follows. Usage: lightnet [OPTION...] SOURCE Apply compilation procedures to SOURCE according to the options. If SOURCE is -, read standard input. Options: -h, --help display this message -v, --version display version information -o, --outfile=FILE specify output file name; if FILE is -, print to standard output; if FILE is !, do not print; (default: out.json) -t, --target=TARGET specify target platform (default: cpu) -c, --compile compile only; do not run -r, --run run only; do not compile; SOURCE should have been memory-planned -Wwarn display warnings (default) -w, -Wno-warn do not display warnings -Winter display internal warnings (default) -Wno-inter do not display internal warnings -debug display debug messages (only works with LN_DEBUG defined when compiling)","title":"Usage"},{"location":"Hacking.html","text":"Hacking \u00b6 Commit Guidelines \u00b6 Submit an issue if you found a bug or have a feature request. Fork and open a pull request when you prepared to contribute. Before that, it is encouraged to open an issue to discuss. When committing to the git repository make sure to include a meaningful commit message. Commit messages should have the following format: Short explanation of the commit Longer explanation explaining exactly what's changed, whether any external or private interfaces changed, what bugs were fixed (with bug tracker reference if applicable) and so on. Be concise but not too brief. Code Conventions \u00b6 Indent the C code with 4 spaces. Use /* */ comments in the C code. The limit on the length of lines is 80 columns and this is a strongly preferred limit, unless exceeding 80 columns significantly increases readability. However, never break user-visible strings such as printf messages. Placing Braces Put the opening brace last on the line except namely functions. Put the closing brace first except in the cases where it is followed by a continuation of the same statement, ie a while in a do-statement or an else in an if-statement. Do not unnecessarily use braces where a single statement will do except that only one branch of a conditional statement is a single statement. E.g.: int function ( int x ) { if ( condition ) { do a ; do b ; } if ( condition ) do e ; if ( condition ) { do f ; do g ; } else { do h ; } do { do c ; do d ; } while ( condition ); } Spaces Use a space after control-flow keywords: if, switch, case, for, do, while . Use a space after each comma. Use spaces around most binary and ternary operators but no space after unary operators. Avoid trailing space. Don't hide pointers with typedef . Bad example: typedef struct foo * foo; As a general rule of thumb, follow the same coding style as the surrounding code.","title":"Hacking"},{"location":"Hacking.html#hacking","text":"","title":"Hacking"},{"location":"Hacking.html#commit-guidelines","text":"Submit an issue if you found a bug or have a feature request. Fork and open a pull request when you prepared to contribute. Before that, it is encouraged to open an issue to discuss. When committing to the git repository make sure to include a meaningful commit message. Commit messages should have the following format: Short explanation of the commit Longer explanation explaining exactly what's changed, whether any external or private interfaces changed, what bugs were fixed (with bug tracker reference if applicable) and so on. Be concise but not too brief.","title":"Commit Guidelines"},{"location":"Hacking.html#code-conventions","text":"Indent the C code with 4 spaces. Use /* */ comments in the C code. The limit on the length of lines is 80 columns and this is a strongly preferred limit, unless exceeding 80 columns significantly increases readability. However, never break user-visible strings such as printf messages. Placing Braces Put the opening brace last on the line except namely functions. Put the closing brace first except in the cases where it is followed by a continuation of the same statement, ie a while in a do-statement or an else in an if-statement. Do not unnecessarily use braces where a single statement will do except that only one branch of a conditional statement is a single statement. E.g.: int function ( int x ) { if ( condition ) { do a ; do b ; } if ( condition ) do e ; if ( condition ) { do f ; do g ; } else { do h ; } do { do c ; do d ; } while ( condition ); } Spaces Use a space after control-flow keywords: if, switch, case, for, do, while . Use a space after each comma. Use spaces around most binary and ternary operators but no space after unary operators. Avoid trailing space. Don't hide pointers with typedef . Bad example: typedef struct foo * foo; As a general rule of thumb, follow the same coding style as the surrounding code.","title":"Code Conventions"},{"location":"Documentation/Building-Options.html","text":"Building Options \u00b6","title":"Building Options"},{"location":"Documentation/Building-Options.html#building-options","text":"","title":"Building Options"},{"location":"Documentation/Intermediate-Representation.html","text":"Intermediate Representation \u00b6","title":"Intermediate Representation"},{"location":"Documentation/Intermediate-Representation.html#intermediate-representation","text":"","title":"Intermediate Representation"},{"location":"Documentation/Miscellaneous.html","text":"Miscellaneous \u00b6 An Easy-to-Write JSON Format \u00b6 For the convenience of write JSON format files (operator descriptions, IR etc.) used in this project, we add several extensions to the official JSON format . The JSON extensions: The last elements in arrays and objects can have a trailing comma , . Comments are supported; every thing from double slashs // to the end of the line is a comment. String values can be heredoc-ed with two triple qoutes ''' , each in a seperated line, between which special characters can be auto-escaped, such as newlines, qoutes \" , etc. The triple qoutes must be at the end of a line except that the ending qoutes can have a comma following them. JSON files using above extensions can be easily transformed into official JSON files with easyjson.pl Tools \u00b6 Executables, scripts and modules helping the development and use of LightNet, located in lightnet/tools . You can always get help for a tool by typing tool_name -h . addop.pl Generate operator defination code from operator description JSON file. When used with -r ROOT option, it will save operator definations in ROOT/src/op/auto , and add operator declarations into corresponding ROOT/src/arch/ln_arch_*.c file. addop_simple.pl Not used now. An old simple script for operator code generation. addtest.pl Generate test templates for a module. easyjson.pl A user interface for easyjson.pm . easyjson.pm A perl module with interfaces for transforming an easy-to-write JSON format file to an official JSON form file. genwts.pl A weight file generator. Convert the input text file containing weight numbers to one text file in hexadecimal string format. ir2json.pl Generate JSON-format IR code from input file which is in simplified IR format .","title":"Miscellaneous"},{"location":"Documentation/Miscellaneous.html#miscellaneous","text":"","title":"Miscellaneous"},{"location":"Documentation/Miscellaneous.html#an-easy-to-write-json-format","text":"For the convenience of write JSON format files (operator descriptions, IR etc.) used in this project, we add several extensions to the official JSON format . The JSON extensions: The last elements in arrays and objects can have a trailing comma , . Comments are supported; every thing from double slashs // to the end of the line is a comment. String values can be heredoc-ed with two triple qoutes ''' , each in a seperated line, between which special characters can be auto-escaped, such as newlines, qoutes \" , etc. The triple qoutes must be at the end of a line except that the ending qoutes can have a comma following them. JSON files using above extensions can be easily transformed into official JSON files with easyjson.pl","title":"An Easy-to-Write JSON Format"},{"location":"Documentation/Miscellaneous.html#tools","text":"Executables, scripts and modules helping the development and use of LightNet, located in lightnet/tools . You can always get help for a tool by typing tool_name -h . addop.pl Generate operator defination code from operator description JSON file. When used with -r ROOT option, it will save operator definations in ROOT/src/op/auto , and add operator declarations into corresponding ROOT/src/arch/ln_arch_*.c file. addop_simple.pl Not used now. An old simple script for operator code generation. addtest.pl Generate test templates for a module. easyjson.pl A user interface for easyjson.pm . easyjson.pm A perl module with interfaces for transforming an easy-to-write JSON format file to an official JSON form file. genwts.pl A weight file generator. Convert the input text file containing weight numbers to one text file in hexadecimal string format. ir2json.pl Generate JSON-format IR code from input file which is in simplified IR format .","title":"Tools"},{"location":"Documentation/Operator-Description.html","text":"Operator Description \u00b6","title":"Operator Description"},{"location":"Documentation/Operator-Description.html#operator-description","text":"","title":"Operator Description"},{"location":"Documentation/Project-Structure.html","text":"Project Structure \u00b6 Directory Layout \u00b6 lightnet/docs Documentation files written in Markdown, which can be transformed into static web pages using mkdocs . lightnet/protos Prototype and description files: lightnet/protos/experiment Experimental prototypes used during development. lightnet/protos/net Network model files in IR format . lightnet/protos/op Operator description files for generating operator defination C source code. lightnet/src Core LightNet source code. lightnet/src/arch Source code for the definations of different software/hardware backends. lightnet/tools/addop.pl can automatically add operator declarations to the corresponding ln_arch_*.c files in this directory while generating operator defination code. lightnet/src/op Source code for the operator definations. lightnet/src/op/auto contains auto-generated operator defination code generated by lightnet/tools/addop.pl lightnet/test Feature and regression tests on LightNet infrastructure. Test templates can be generated with lightnet/tools/addtest.pl . lightnet/tools Executables and modules helping the development and use of LightNet. You can always get help for a tool by typing tool_name -h . See details in Tools .","title":"Project Structure"},{"location":"Documentation/Project-Structure.html#project-structure","text":"","title":"Project Structure"},{"location":"Documentation/Project-Structure.html#directory-layout","text":"lightnet/docs Documentation files written in Markdown, which can be transformed into static web pages using mkdocs . lightnet/protos Prototype and description files: lightnet/protos/experiment Experimental prototypes used during development. lightnet/protos/net Network model files in IR format . lightnet/protos/op Operator description files for generating operator defination C source code. lightnet/src Core LightNet source code. lightnet/src/arch Source code for the definations of different software/hardware backends. lightnet/tools/addop.pl can automatically add operator declarations to the corresponding ln_arch_*.c files in this directory while generating operator defination code. lightnet/src/op Source code for the operator definations. lightnet/src/op/auto contains auto-generated operator defination code generated by lightnet/tools/addop.pl lightnet/test Feature and regression tests on LightNet infrastructure. Test templates can be generated with lightnet/tools/addtest.pl . lightnet/tools Executables and modules helping the development and use of LightNet. You can always get help for a tool by typing tool_name -h . See details in Tools .","title":"Directory Layout"}]}