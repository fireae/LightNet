{
    "name": "cuda_normal",
    "arch": "cuda",
    "author": "Zhixu Zhao",
    "ops": [
        {
            "optype": "create",
            "rules": [
                {
                    "cond": ["self.outs[dst]=>"],
                    "replace": ["create_cpu"],
                },
                {
                    "cond": [
                        "self.outs[dst]=>conv2d.ins[src]",
                        "self.outs[dst]=>relu.ins[src]",
                        "self.outs[dst]=>maxpool2d.ins[src]",
                        "self.outs[dst]=>softmax.ins[src]",
                        "self.outs[dst]=>sigmoid.ins[src]",
                        "self.outs[dst]=>concat.ins[src1]",
                        "self.outs[dst]=>concat.ins[src2]",
                        "self.outs[dst]=>transform_bboxSQD.ins[src_delta]",
                        "self.outs[dst]=>transform_bboxSQD.ins[src_anchor]",
                        "self.outs[dst]=>rearange.ins[src]",
                    ],
                    "replace": ["create_cuda"]
                },
                {
                    "cond": [],
                    "replace": ["create_cpu"]
                },
            ],
        },
        {
            "optype": "create_cuda",
            "rules": [
                {
                    "cond": [],
                    "match": false
                }
            ]
        },
        {
            "optype": "conv2d",
            "rules": [
                {
                    "cond": [
                        "self.params[padding][0] != self.params[padding][2]",
                        "self.params[padding][1] != self.params[padding][3]"
                    ],
                    "replace": ["conv2d_cuda"]
                },
                {
                    "cond": [],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src]",
                        "trt.ins[weight$@] = self.ins[weight]",
                        "trt.ins[weight$@] = self.ins[bias]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[op$@] = \"conv\"",
                        "trt.params[op$^_src] = self.ins[src]",
                        "trt.params[op$^_weight] = self.ins[weight]",
                        "trt.params[op$^_bias] = self.ins[bias]",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[op$^_group] = self.params[group]",
                        "trt.params[op$^_output_c] = self.ins[weight].dims[1]",
                        "trt.params[op$^_size] = self.params[size]",
                        "trt.params[op$^_stride] = self.params[stride]",
                        "trt.params[op$^_padding] = self.params[padding][0,2]",
                        "trt.params[op$^_dilation] = self.params[dilation]",
                        "trt.params[batch_size] = self.ins[src].dims[0]"
                    ],
                }
            ]
        },
        {
            "optype": "batchnorm",
            "rules": [
                {
                    "cond": [],
                    "replace": ["bn2scale_wts_cpu bwc", "tensorrt trt"],
                    "details": [
                        "bwc.ins[src_mean] = self.ins[mean]",
                        "bwc.ins[src_var] = self.ins[var]",
                        "bwc.ins[src_scale] = self.ins[scale]",
                        "bwc.ins[src_offset] = self.ins[offset]",
                        "bwc.params[epsilon] = self.params[epsilon]",

                        "trt.ins[src$@] = self.ins[src]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.outs[weight$@] = bwc.outs[dst_shift]",
                        "trt.outs[weight$@] = bwc.outs[dst_scale]",
                        "trt.outs[weight$@] = bwc.outs[dst_power]",
                        "trt.params[op$@] = \"scale\"",
                        "trt.params[op$^_src] = self.ins[src]",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[op$^_shift] = bwc.outs[dst_shift]",
                        "trt.params[op$^_scale] = bwc.outs[dst_scale]",
                        "trt.params[op$^_power] = bwc.outs[dst_power]",
                        "trt.params[op$^_scale_mode] = \"kCHANNEL\"",
                        "trt.params[batch_size] = self.ins[src].dims[0]",
                    ]
                }
            ]
        },
        {
            "optype": "concat",
            "rules": [
                // {
                //     "cond": [
                //         "self.params[axis] == 0",
                //         "LN_TRT_VER(\"4.0.0\") < 0 && self.ins[src1].ndim < 4 && self.params[axis] != 1",
                //         "LN_TRT_VER(\"4.0.0\") < 0 && self.ins[src1].ndim >= 4 && self.params[axis] != self.ins[src1].ndim - 3"
                //     ],
                //     "replace": ["concat_cuda"]
                // },
                // {
                //     "cond": ["LN_TRT_VER(\"4.0.0\") < 0"],
                //     "replace": ["tensorrt trt"],
                //     "details": [
                //         "trt.ins[src$@] = self.ins[src1]",
                //         "trt.ins[src$@] = self.ins[src2]",
                //         "trt.outs[dst$@] = self.outs[dst]",
                //         "trt.params[op$@] = \"concat\"",
                //         "trt.params[op$^_src1] = self.ins[src1]",
                //         "trt.params[op$^_src2] = self.ins[src2]",
                //         "trt.params[batch_size] = self.ins[src1].dims[0]"
                //     ]
                // },
                {
                    "cond": [],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src1]",
                        "trt.ins[src$@] = self.ins[src2]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[op$@] = \"concat\"",
                        "trt.params[op$^_src1] = self.ins[src1]",
                        "trt.params[op$^_src2] = self.ins[src2]",
                        "trt.params[op$^_axis] = self.params[axis]",
                        "trt.params[batch_size] = self.ins[src1].dims[0]"
                    ]
                }
            ]
        },
        {
            "optype": "print",
            "rules": [
                {
                    "cond": ["self.ins[src].mtype == LN_MEM_CPU"],
                    "replace": ["print_cpu"]
                },
                {
                    "cond": ["self.ins[src].mtype == LN_MEM_CUDA"],
                    "replace": ["print_cuda"]
                },
                {
                    "cond": [],
                    "err": "optype 'print''s 'src' is either of LN_MEM_CPU or LN_MEM_CUDA"
                }
            ]
        },
        {
            "optype": "fprint",
            "rules": [
                {
                    "cond": ["self.ins[src].mtype == LN_MEM_CPU"],
                    "replace": ["fprint_cpu"]
                },
                {
                    "cond": ["self.ins[src].mtype == LN_MEM_CUDA"],
                    "replace": ["fprint_cuda"]
                },
                {
                    "cond": [],
                    "err": "optype 'fprint''s 'src' is either of LN_MEM_CPU or LN_MEM_CUDA"
                }
            ]
        },
    ]
}
