concat {
    optype: "concat",
    author: "Zhao Zhixu",
    arch: "none",
    tensors_in: [
        {arg_name: "src1", mtype: "LN_MEM_NONE"},
        {arg_name: "src2", mtype: "LN_MEM_NONE", sametype: "src1"}
    ],
    tensors_out: [
        {arg_name: "dst", mtype: "LN_MEM_NONE",
         ndim: "src1->ndim", dtype: "src1->dtype",
         custom: `
{
dst_dims = ln_clone(src1->dims, sizeof(int)*src1->ndim);
dst_dims[axis] = src1->dims[axis] + src2->dims[axis];
}
`,
         cleanup: "ln_free(dst_dims);"}
    ],
    params: [
        {arg_name: "axis", ptype: "LN_PARAM_NUMBER",
         realtype: "int",
         custom: `
{
    char shape1[LN_MAXLINE];
    char shape2[LN_MAXLINE];
    ln_opck_satisfy_msg(axis >= 0 && axis < src1->ndim, "'axis' %d should match the dimensions of 'src1' (%s )and 'src2' (%d)", axis, ln_sprint_shape(shape1, src1->ndim, src1->dims), ln_sprint_shape(shape2, src2->ndim, src2->dims));
}
`
        }
    ],
    custom: `
{
for (int i = 0; i < src1->ndim; i++) {
    if (i == axis)
        continue;
    char shape1[LN_MAXLINE];
    char shape2[LN_MAXLINE];
    ln_opck_satisfy_msg(src1->dims[i] == src2->dims[i], "'src1' (%s) and 'src2' (%s) should have the same shape, except in the dimension corresponding to 'axis' %d", ln_sprint_shape(shape1, src1->ndim, src1->dims), ln_sprint_shape(shape2, src2->ndim, src2->dims), axis);
}
}
`
}

concat_cpu : concat {
    optype: "concat_cpu",
    arch: "cpu",
    tensors_in: [
        {mtype: "LN_MEM_CPU"},
        {mtype: "LN_MEM_CPU"}
    ],
    tensors_out: [
        {mtype: "LN_MEM_CPU"}
    ],
    run: ""
}

concat_cuda : concat {
    optype: "concat_cuda",
    arch: "cuda",
    tensors_in: [
        {mtype: "LN_MEM_CUDA"},
        {mtype: "LN_MEM_CUDA"}
    ],
    tensors_out: [
        {mtype: "LN_MEM_CUDA"}
    ],
    run: ""
}
