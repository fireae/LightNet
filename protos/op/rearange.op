rearange {
    optype: "rearange",
    author: "Zhao Zhixu",
    arch: "none",
    tensors_in: [
        {arg_name: "src", mtype: "LN_MEM_NONE", ndim: 1}
    ],
    tensors_out: [
        {arg_name: "dst", mtype: "LN_MEM_NONE", owner: "src_name",
         dtype: "src->dtype", ndim: 1,
         custom: `
{
double len = ceil((stop - start) / step);
dst_dims = ln_alloc(sizeof(int));
dst_dims[0] = (int)len;
}
`,
         cleanup: "ln_free(dst_dims);"}
    ],
    params: [
        {arg_name: "start", ptype: "LN_PARAM_NUMBER",
         realtype: "double"},
        {arg_name: "stop", ptype: "LN_PARAM_NUMBER",
         realtype: "double"},
        {arg_name: "step", ptype: "LN_PARAM_NUMBER",
         realtype: "double"},
    ],
    custom: `
{
double max, min, len;
len = ceil((stop - start) / step);
max = tl_dtype_max_double(src->dtype);
min = tl_dtype_min_double(src->dtype);
ln_opck_satisfy_msg(src->len == (int)len, "'src->len' should be equal with ceil((stop - start) / step) = %d", (int)len);
ln_opck_param_double_ge(start_entry, min);
ln_opck_param_double_le(start_entry, max);
ln_opck_param_double_ge(stop_entry, min);
ln_opck_param_double_le(stop_entry, max);
ln_opck_param_double_ge(step_entry, min);
ln_opck_param_double_le(step_entry, max);
ln_opck_param_double_ne(step_entry, 0);
ln_opck_param_double_gt(stop_entry, start_entry->value_double);
/* TODO: expand to all possibilities */
}
`,
    calc_offset: "return src_entry->offset;"
}

rearange_cpu : rearange {
    optype: "rearange_cpu",
    arch: "cpu",
    tensors_in: [
        {mtype: "LN_MEM_CPU"}
    ],
    tensors_out: [
        {mtype: "LN_MEM_CPU"}
    ],
    run: "tl_tensor_rearange(dst, start, stop, step);",
}

rearange_cuda : rearange {
    optype: "rearange_cuda",
    arch: "cuda",
    tensors_in: [
        {mtype: "LN_MEM_CUDA"}
    ],
    tensors_out: [
        {mtype: "LN_MEM_CUDA"}
    ],
    run: "tl_tensor_rearange_cuda(dst, start, stop, step);",
}
