{
    optype: "bn2scale_wts_cpu",
    author: "Zhao Zhixu",
    arch: "cpu",
    tensors_in: [
        {arg_name: "src_mean", mtype: "LN_MEM_CPU",
         dtype: "TL_FLOAT", static: true, ndim: 1},
        {arg_name: "src_var", mtype: "LN_MEM_CPU",
         dtype: "TL_FLOAT", static: true, ndim: 1},
        {arg_name: "src_scale", mtype: "LN_MEM_CPU",
         dtype: "TL_FLOAT", static: true, ndim: 1},
        {arg_name: "src_offset", mtype: "LN_MEM_CPU",
         dtype: "TL_FLOAT", static: true, ndim: 1}
    ],
    tensors_out: [
        {arg_name: "dst_scale", mtype: "LN_MEM_CPU", static: true,
         dtype: "src_mean->dtype", ndim: "1", dims: "src_mean->dims"},
        {arg_name: "dst_shift", mtype: "LN_MEM_CPU", static: true,
         dtype: "src_mean->dtype", ndim: "1", dims: "src_mean->dims"},
        {arg_name: "dst_power", mtype: "LN_MEM_CPU", static: true,
         dtype: "src_mean->dtype", ndim: "1", dims: "src_mean->dims"}
    ],
    params: [
        {arg_name: "epsilon", ptype: "LN_PARAM_NUMBER", realtype: "float",
         gt: 0}
    ],
    static_run: `
float *dst_scale_data = dst_scale->data;
float *dst_shift_data = dst_shift->data;
float *dst_power_data = dst_power->data;
float *src_mean_data = src_mean->data;
float *src_var_data = src_var->data;
float *src_scale_data = src_scale->data;
float *src_offset_data = src_offset->data;
for (int i = 0; i < dst_scale->len; i++) {
    dst_scale_data[i] = src_scale_data[i] / (src_var_data[i] + epsilon);
    dst_shift_data[i] = src_offset_data[i] - src_mean_data[i] * src_scale_data[i] / (src_var_data[i] + epsilon);
    dst_power_data[i] = 1;
}
`
}
