{
    ops: [
        {
            optype: "avgpool2d",
            author: "Zhao Zhixu",
            arch: "none",
            tensors_in: [
                // [batch, channel, height, width]
                {arg_name: "src", mtype: "LN_MEM_NONE", ndim: 4}
            ],
            tensors_out: [
                {arg_name: "dst", mtype: "LN_MEM_NONE",
                 ndim: "src->ndim", dtype: "src->dtype",
                 custom: `
{
dst_dims = ln_alloc(sizeof(int)*4);
dst_dims[0] = src->dims[0];
dst_dims[1] = src->dims[1];
dst_dims[2] = ln_output_dim_conv(src->dims[2], size[0], stride[0], padding[0] + padding[2], 1);
dst_dims[3] = ln_output_dim_conv(src->dims[3], size[1], stride[1], padding[1] + padding[3], 1);
}
`,
                 cleanup: "ln_free(dst_dims);"}
            ],
            params: [
                // [height, width]
                {arg_name: "size", ptype: "LN_PARAM_ARRAY_NUMBER",
                 realtype: "int", len: 2, gt: 0},
                // [height, width]
                {arg_name: "stride", ptype: "LN_PARAM_ARRAY_NUMBER",
                 realtype: "int", len: 2, gt: 0},
                // [top, left, bottom, right]
                {arg_name: "padding", ptype: "LN_PARAM_ARRAY_NUMBER",
                 realtype: "int", len: 4, ge: 0},
                {arg_name: "autopad", ptype: "LN_PARAM_STRING",
                 custom: `
{
if (ln_streq(autopad, "VALID") || ln_streq(autopad, "SAME_UPPER") ||
    ln_streq(autopad, "SAME_LOWER")) {
    ln_autopadding_conv(padding, src->dims, size, stride, (int[]){1, 1}, 2, autopad);
} else if (ln_streq(autopad, "NOTSET")){
} else {
    ln_msg_warn("unsupported 'autopad' %s", autopad);
}
}
`
                }
            ]
        },
        {
            optype: "avgpool2d_cpu",
            author: "Zhao Zhixu",
            arch: "cpu",
            tensors_in: [
                // [batch, channel, height, width]
                {arg_name: "src", mtype: "LN_MEM_CPU", ndim: 4}
            ],
            tensors_out: [
                {arg_name: "dst", mtype: "LN_MEM_CPU",
                 ndim: "src->ndim", dtype: "src->dtype",
                 custom: `
{
dst_dims = ln_alloc(sizeof(int)*4);
dst_dims[0] = src->dims[0];
dst_dims[1] = src->dims[1];
dst_dims[2] = ln_output_dim_conv(src->dims[2], size[0], stride[0], padding[0] + padding[2], 1);
dst_dims[3] = ln_output_dim_conv(src->dims[3], size[1], stride[1], padding[1] + padding[3], 1);
}
`,
                 cleanup: "ln_free(dst_dims);"}
            ],
            params: [
                // [height, width]
                {arg_name: "size", ptype: "LN_PARAM_ARRAY_NUMBER",
                 realtype: "int", len: 2, gt: 0},
                // [height, width]
                {arg_name: "stride", ptype: "LN_PARAM_ARRAY_NUMBER",
                 realtype: "int", len: 2, gt: 0},
                // [top, left, bottom, right]
                {arg_name: "padding", ptype: "LN_PARAM_ARRAY_NUMBER",
                 realtype: "int", len: 4, ge: 0},
                {arg_name: "autopad", ptype: "LN_PARAM_STRING",
                 custom: `
{
if (ln_streq(autopad, "VALID") || ln_streq(autopad, "SAME_UPPER") ||
    ln_streq(autopad, "SAME_LOWER")) {
    ln_autopadding_conv(padding, src->dims, size, stride, (int[]){1, 1}, 2, autopad);
} else if (ln_streq(autopad, "NOTSET")){
} else {
    ln_msg_warn("unsupported 'autopad' %s", autopad);
}
}
`
                }
            ],
            run: ""
        },
        {
            optype: "avgpool2d_cuda",
            author: "Zhao Zhixu",
            arch: "cuda",
            tensors_in: [
                // [batch, channel, height, width]
                {arg_name: "src", mtype: "LN_MEM_CUDA", ndim: 4}
            ],
            tensors_out: [
                {arg_name: "dst", mtype: "LN_MEM_CUDA",
                 ndim: "src->ndim", dtype: "src->dtype",
                 custom: `
{
dst_dims = ln_alloc(sizeof(int)*4);
dst_dims[0] = src->dims[0];
dst_dims[1] = src->dims[1];
dst_dims[2] = ln_output_dim_conv(src->dims[2], size[0], stride[0], padding[0] + padding[2], 1);
dst_dims[3] = ln_output_dim_conv(src->dims[3], size[1], stride[1], padding[1] + padding[3], 1);
}
`,
                 cleanup: "ln_free(dst_dims);"}
            ],
            params: [
                // [height, width]
                {arg_name: "size", ptype: "LN_PARAM_ARRAY_NUMBER",
                 realtype: "int", len: 2, gt: 0},
                // [height, width]
                {arg_name: "stride", ptype: "LN_PARAM_ARRAY_NUMBER",
                 realtype: "int", len: 2, gt: 0},
                // [top, left, bottom, right]
                {arg_name: "padding", ptype: "LN_PARAM_ARRAY_NUMBER",
                 realtype: "int", len: 4, ge: 0},
                {arg_name: "autopad", ptype: "LN_PARAM_STRING",
                 custom: `
{
if (ln_streq(autopad, "VALID") || ln_streq(autopad, "SAME_UPPER") ||
    ln_streq(autopad, "SAME_LOWER")) {
    ln_autopadding_conv(padding, src->dims, size, stride, (int[]){1, 1}, 2, autopad);
} else if (ln_streq(autopad, "NOTSET")){
} else {
    ln_msg_warn("unsupported 'autopad' %s", autopad);
}
}
`
                }
            ],
            run: ""
        }
    ]
}
