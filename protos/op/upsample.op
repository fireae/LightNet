upsample {
    optype: "upsample",
    author: "Zhao Zhixu",
    arch: "none",
    tensors_in: [
        {arg_name: "src", mtype: "LN_MEM_NONE"}
    ],
    tensors_out: [
        {arg_name: "dst", mtype: "LN_MEM_NONE",
         dtype: "src->dtype", ndim: "src->ndim",
         custom: `
{
dst_dims = ln_alloc(sizeof(int)*dst_ndim);
for (int i = 0; i < dst_ndim; i++)
    dst_dims[i] = (int)floorf(scales[i] * src->dims[i]);
}
`,
         cleanup: "ln_free(dst_dims);"}
    ],
    params: [
        {arg_name: "mode", ptype: "LN_PARAM_STRING",
         realtype: "int",
         from_func: "tl_resize_type_from_str",
         check: "mode != -1, \"'mode' should be 'TL_NEAREST' or 'TL_LINEAR'\""},
        {arg_name: "scales", ptype: "LN_PARAM_ARRAY_NUMBER",
         realtype: "float", gt: 0,
         check: "scales_entry->array_len == src->ndim, \"the length of 'scales' should be the same as the rank of input 'src'\""}
    ]
}

upsample_cpu : upsample {
    optype: "upsample_cpu",
    arch: "cpu",
    tensors_in: [
        {mtype: "LN_MEM_CPU"}
    ],
    tensors_out: [
        {mtype: "LN_MEM_CPU"}
    ],
    run: "tl_tensor_resize(src, dst, dst->dims, mode);"
}

upsample_cuda : upsample {
    optype: "upsample_cuda",
    arch: "cuda",
    tensors_in: [
        {mtype: "LN_MEM_CUDA"}
    ],
    tensors_out: [
        {mtype: "LN_MEM_CUDA"}
    ],
    run: "tl_tensor_resize_cuda(src, dst, dst->dims, mode);"
}
