{
    "author": "Zhao Zhixu",
    "arch": "tensorrt",
    "name": "expander_tensorrt",
    "head": "#include \"ln_tensorrt.h\"",
    "ops": [
        {
            "optype": "create",
            "rules": [
                {
                    "cond": ["self.outs[dst]=>"],
                    "replace": ["create_cpu"]
                },
                {
                    "cond": [
                        "self.outs[dst]=>conv2d.ins[src]",
                        "self.outs[dst]=>deconv2d.ins[src]",
                        "self.outs[dst]=>relu.ins[src]",
                        "self.outs[dst]=>maxpool2d.ins[src]",
                        "self.outs[dst]=>softmax.ins[src]",
                        "self.outs[dst]=>sigmoid.ins[src]",
                        "self.outs[dst]=>concat.ins[src1]",
                        "self.outs[dst]=>concat.ins[src2]",
                        "self.outs[dst]=>transform_bboxSQD.ins[src_delta]",
                        "self.outs[dst]=>transform_bboxSQD.ins[src_anchor]",
                        "self.outs[dst]=>rearange.ins[src]",
                    ],
                    "replace": ["create_cuda"]
                },
                {
                    "cond": [],
                    "replace": ["create_cpu"]
                },
            ]
        },
        {
            "optype": "create_cuda",
            "rules": [
                {
                    "cond": [],
                    "match": false
                }
            ]
        },
        {
            "optype": "conv2d",
            "rules":[
                {
                    "cond": [
                        "self.params[padding][0] != self.params[padding][2] && ln_tensorrt_version_cmp(\"4.0.0\") < 0",
                        "self.params[padding][1] != self.params[padding][3] && ln_tensorrt_version_cmp(\"4.0.0\") < 0"
                    ],
                    "replace": ["conv2d_cuda"],
                    "warn": "tensorrt doesn't support asymmetrical avgpool2d's 'padding', use conv2d_cuda instead"
                },
                {
                    "cond": [
                        "self.params[padding][0] != self.params[padding][2] && ln_tensorrt_version_cmp(\"4.0.0\") >= 0",
                        "self.params[padding][1] != self.params[padding][3] && ln_tensorrt_version_cmp(\"4.0.0\") >= 0"
                    ],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src]",
                        "trt.ins[weight$@] = self.ins[weight]",
                        "trt.ins[weight$@] = self.ins[bias]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[dst$^_shape] = self.outs[dst].dims",
                        "trt.params[dst$^_dtype] = ${type(char *) tl_dtype_name(${rh self.outs[dst].dtype})}",
                        "trt.params[op$@] = \"padding\"",
                        "trt.params[op$^_src] = self.ins[src]",
                        "trt.params[op$^_dst] = ${type(char *) ${con(${rh self.outs[dst]}, \"_padding\")}}",
                        "trt.params[op$^_padding] = self.params[padding]",

                        "trt.params[op$@] = \"conv\"",
                        "trt.params[op$^_src] = ${type(char *) ${con(${rh self.outs[dst]}, \"_padding\")}}",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[op$^_weight] = self.ins[weight]",
                        "trt.params[op$^_bias] = self.ins[bias]",
                        "trt.params[op$^_size] = self.params[size]",
                        "trt.params[op$^_stride] = self.params[stride]",
                        "trt.params[op$^_group] = self.params[group]",
                        "trt.params[op$^_output_c] = self.ins[weight].dims[0]",
                        "trt.params[op$^_padding] = ${type(int *, 2) (int[]){0,0}}",
                        "trt.params[op$^_dilation] = self.params[dilation]",
                        "trt.params[batch_size] = self.ins[src].dims[0]"
                    ]
                },
                {
                    "cond": [],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src]",
                        "trt.ins[weight$@] = self.ins[weight]",
                        "trt.ins[weight$@] = self.ins[bias]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[dst$^_shape] = self.outs[dst].dims",
                        "trt.params[dst$^_dtype] = ${type(char *) tl_dtype_name(${rh self.outs[dst].dtype})}",
                        "trt.params[op$@] = \"conv\"",
                        "trt.params[op$^_src] = self.ins[src]",
                        "trt.params[op$^_weight] = self.ins[weight]",
                        "trt.params[op$^_bias] = self.ins[bias]",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[op$^_group] = self.params[group]",
                        "trt.params[op$^_output_c] = self.ins[weight].dims[0]",
                        "trt.params[op$^_size] = self.params[size]",
                        "trt.params[op$^_stride] = self.params[stride]",
                        "trt.params[op$^_padding] = self.params[padding][0, 2]",
                        "trt.params[op$^_dilation] = self.params[dilation]",
                        "trt.params[batch_size] = self.ins[src].dims[0]"
                    ],
                }
            ]
        },
        {
            "optype": "deconv2d",
            "rules":[
                {
                    "cond": [
                        "self.params[padding][0] != self.params[padding][2] && ln_tensorrt_version_cmp(\"4.0.0\") < 0",
                        "self.params[padding][1] != self.params[padding][3] && ln_tensorrt_version_cmp(\"4.0.0\") < 0"
                    ],
                    "replace": ["deconv2d_cuda"],
                    "warn": "tensorrt doesn't support asymmetrical conv2d's 'padding', use deconv2d_cuda instead"
                },
                {
                    "cond": [
                        "self.params[padding][0] != self.params[padding][2] && ln_tensorrt_version_cmp(\"4.0.0\") >= 0",
                        "self.params[padding][1] != self.params[padding][3] && ln_tensorrt_version_cmp(\"4.0.0\") >= 0"
                    ],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src]",
                        "trt.ins[weight$@] = self.ins[weight]",
                        "trt.ins[weight$@] = self.ins[bias]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[dst$^_shape] = self.outs[dst].dims",
                        "trt.params[dst$^_dtype] = ${type(char *) tl_dtype_name(${rh self.outs[dst].dtype})}",
                        "trt.params[op$@] = \"padding\"",
                        "trt.params[op$^_src] = self.ins[src]",
                        "trt.params[op$^_dst] = ${type(char *) ${con(${rh self.outs[dst]}, \"_padding\")}}",
                        "trt.params[op$^_padding] = self.params[padding]",

                        "trt.params[op$@] = \"deconv\"",
                        "trt.params[op$^_src] = ${type(char *) ${con(${rh self.outs[dst]}, \"_padding\")}}",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[op$^_weight] = self.ins[weight]",
                        "trt.params[op$^_bias] = self.ins[bias]",
                        "trt.params[op$^_size] = self.params[size]",
                        "trt.params[op$^_stride] = self.params[stride]",
                        "trt.params[op$^_group] = self.params[group]",
                        "trt.params[op$^_output_c] = self.ins[weight].dims[0]",
                        "trt.params[op$^_padding] = ${type(int *, 2) (int[]){0,0}}",
                        "trt.params[batch_size] = self.ins[src].dims[0]"
                    ]
                },
                {
                    "cond": [
                        "self.params[output_padding][0] != 0",
                        "self.params[output_padding][1] != 0",
                    ],
                    "replace": ["deconv2d_cuda"],
                    "warn": "tensorrt doesn't support deconv2d's none-zero 'output_padding' param, use deconv2d_cuda instead"
                },
                {
                    "cond": [
                        "self.params[dilation][0] != 1",
                        "self.params[dilation][1] != 1",
                    ],
                    "replace": ["deconv2d_cuda"],
                    "warn": "tensorrt doesn't support deconv2d's none-one 'dilation' param, use deconv2d_cuda instead"
                },
                {
                    "cond": [],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src]",
                        "trt.ins[weight$@] = self.ins[weight]",
                        "trt.ins[weight$@] = self.ins[bias]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[dst$^_shape] = self.outs[dst].dims",
                        "trt.params[dst$^_dtype] = ${type(char *) tl_dtype_name(${rh self.outs[dst].dtype})}",
                        "trt.params[op$@] = \"deconv\"",
                        "trt.params[op$^_src] = self.ins[src]",
                        "trt.params[op$^_weight] = self.ins[weight]",
                        "trt.params[op$^_bias] = self.ins[bias]",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[op$^_group] = self.params[group]",
                        "trt.params[op$^_output_c] = self.outs[dst].dims[1]",
                        "trt.params[op$^_size] = self.params[size]",
                        "trt.params[op$^_stride] = self.params[stride]",
                        "trt.params[op$^_padding] = self.params[padding][0, 2]",
                        "trt.params[batch_size] = self.ins[src].dims[0]"
                    ],
                }
            ]
        },
        {
            "optype": "relu",
            "rules":[
                {
                    "cond": [],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[dst$^_shape] = self.outs[dst].dims",
                        "trt.params[dst$^_dtype] = ${type(char *) tl_dtype_name(${rh self.outs[dst].dtype})}",
                        "trt.params[op$@] = \"activation\"",
                        "trt.params[op$^_src] = self.ins[src]",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[op$^_activation_type] = \"kRELU\"",
                        "trt.params[batch_size] = self.ins[src].dims[0]"
                    ],
                }
            ]
        },
        {
            "optype": "lrelu",
            "rules":[
                {
                    "cond": [],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[dst$^_shape] = self.outs[dst].dims",
                        "trt.params[dst$^_dtype] = ${type(char *) tl_dtype_name(${rh self.outs[dst].dtype})}",
                        "trt.params[op$@] = \"lrelu\"",
                        "trt.params[op$^_src] = self.ins[src]",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[op$^_negslope] = self.params[negslope]",
                        "trt.params[batch_size] = self.ins[src].dims[0]"
                    ],
                }
            ]
        },
        {
            "optype": "sigmoid",
            "rules":[
                {
                    "cond": [],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[dst$^_shape] = self.outs[dst].dims",
                        "trt.params[dst$^_dtype] = ${type(char *) tl_dtype_name(${rh self.outs[dst].dtype})}",
                        "trt.params[op$@] = \"activation\"",
                        "trt.params[op$^_src] = self.ins[src]",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[op$^_activation_type] = \"kSIGMOID\"",
                        "trt.params[batch_size] = self.ins[src].dims[0]"
                    ],
                }
            ]
        },
        {
            "optype": "maxpool2d",
            "rules":[
                {
                    "cond": [
                        "self.params[padding][0] != self.params[padding][2] && ln_tensorrt_version_cmp(\"4.0.0\") < 0",
                        "self.params[padding][1] != self.params[padding][3] && ln_tensorrt_version_cmp(\"4.0.0\") < 0"
                    ],
                    "replace": ["maxpool2d_cuda"],
                    "warn": "tensorrt doesn't support asymmetrical maxpool2d's 'padding', use maxpool2d_cuda instead"
                },
                {
                    "cond": [
                        "self.params[padding][0] != self.params[padding][2] && ln_tensorrt_version_cmp(\"4.0.0\") >= 0",
                        "self.params[padding][1] != self.params[padding][3] && ln_tensorrt_version_cmp(\"4.0.0\") >= 0"
                    ],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[dst$^_shape] = self.outs[dst].dims",
                        "trt.params[dst$^_dtype] = ${type(char *) tl_dtype_name(${rh self.outs[dst].dtype})}",
                        "trt.params[op$@] = \"padding\"",
                        "trt.params[op$^_src] = self.ins[src]",
                        "trt.params[op$^_dst] = ${type(char *) ${con(${rh self.outs[dst]}, \"_padding\")}}",
                        "trt.params[op$^_padding] = self.params[padding]",

                        "trt.params[op$@] = \"pooling\"",
                        "trt.params[op$^_src] = ${type(char *) ${con(${rh self.outs[dst]}, \"_padding\")}}",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[op$^_pooling_type] = \"kMAX\"",
                        "trt.params[op$^_size] = self.params[size]",
                        "trt.params[op$^_stride] = self.params[stride]",
                        "trt.params[op$^_padding] = ${type(int *, 2) (int[]){0,0}}",
                        "trt.params[batch_size] = self.ins[src].dims[0]"
                    ]
                },
                {
                    "cond": [],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[dst$^_shape] = self.outs[dst].dims",
                        "trt.params[dst$^_dtype] = ${type(char *) tl_dtype_name(${rh self.outs[dst].dtype})}",
                        "trt.params[op$@] = \"pooling\"",
                        "trt.params[op$^_src] = self.ins[src]",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[op$^_pooling_type] = \"kMAX\"",
                        "trt.params[op$^_size] = self.params[size]",
                        "trt.params[op$^_stride] = self.params[stride]",
                        "trt.params[op$^_padding] = self.params[padding][0,2]",
                        "trt.params[batch_size] = self.ins[src].dims[0]"
                    ],
                }
            ]
        },
        {
            "optype": "avgpool2d",
            "rules":[
                {
                    "cond": [
                        "self.params[padding][0] != self.params[padding][2] && ln_tensorrt_version_cmp(\"4.0.0\") < 0",
                        "self.params[padding][1] != self.params[padding][3] && ln_tensorrt_version_cmp(\"4.0.0\") < 0"
                    ],
                    "replace": ["avgpool2d_cuda"],
                    "warn": "tensorrt doesn't support asymmetrical avgpool2d's 'padding', use avgpool2d_cuda instead"
                },
                {
                    "cond": [
                        "self.params[padding][0] != self.params[padding][2] && ln_tensorrt_version_cmp(\"4.0.0\") >= 0",
                        "self.params[padding][1] != self.params[padding][3] && ln_tensorrt_version_cmp(\"4.0.0\") >= 0"
                    ],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[dst$^_shape] = self.outs[dst].dims",
                        "trt.params[dst$^_dtype] = ${type(char *) tl_dtype_name(${rh self.outs[dst].dtype})}",
                        "trt.params[op$@] = \"padding\"",
                        "trt.params[op$^_src] = self.ins[src]",
                        "trt.params[op$^_dst] = ${type(char *) ${con(${rh self.outs[dst]}, \"_padding\")}}",
                        "trt.params[op$^_padding] = self.params[padding]",

                        "trt.params[op$@] = \"pooling\"",
                        "trt.params[op$^_src] = ${type(char *) ${con(${rh self.outs[dst]}, \"_padding\")}}",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[op$^_pooling_type] = \"kAVERAGE\"",
                        "trt.params[op$^_size] = self.params[size]",
                        "trt.params[op$^_stride] = self.params[stride]",
                        "trt.params[op$^_padding] = ${type(int *, 2) (int[]){0,0}}",
                        "trt.params[batch_size] = self.ins[src].dims[0]"
                    ]
                },
                {
                    "cond": [],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[dst$^_shape] = self.outs[dst].dims",
                        "trt.params[dst$^_dtype] = ${type(char *) tl_dtype_name(${rh self.outs[dst].dtype})}",
                        "trt.params[op$@] = \"pooling\"",
                        "trt.params[op$^_src] = self.ins[src]",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[op$^_pooling_type] = \"kAVERAGE\"",
                        "trt.params[op$^_size] = self.params[size]",
                        "trt.params[op$^_stride] = self.params[stride]",
                        "trt.params[op$^_padding] = self.params[padding][0,2]",
                        "trt.params[batch_size] = self.ins[src].dims[0]"
                    ],
                }
            ]
        },
        {
            "optype": "softmax",
            "rules": [
                {
                    "cond": [
                        "self.params[axis] == 0",
                        "ln_tensorrt_version_cmp(\"4.4.0\") < 0 && self.ins[src].ndim < 4 && self.params[axis] != 1",
                        "ln_tensorrt_version_cmp(\"4.4.0\") < 0 && self.ins[src].ndim >= 4 && self.params[axis] != self.ins[src].ndim - 3",
                    ],
                    "replace": ["softmax_cuda"]
                },
                {
                    "cond": ["ln_tensorrt_version_cmp(\"4.4.0\") < 0"],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[dst$^_shape] = self.outs[dst].dims",
                        "trt.params[dst$^_dtype] = ${type(char *) tl_dtype_name(${rh self.outs[dst].dtype})}",
                        "trt.params[op$@] = \"softmax\"",
                        "trt.params[op$^_src] = self.ins[src]",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[batch_size] = self.ins[src].dims[0]"
                    ]
                },
                {
                    "cond": [],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[dst$^_shape] = self.outs[dst].dims",
                        "trt.params[dst$^_dtype] = ${type(char *) tl_dtype_name(${rh self.outs[dst].dtype})}",
                        "trt.params[op$@] = \"softmax\"",
                        "trt.params[op$^_src] = self.ins[src]",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[op$^_axes] = ${type(int) 0 | (1 << ${rh self.params[axis]})}",
                        "trt.params[batch_size] = self.ins[src].dims[0]"
                    ]
                }
            ]
        },
        {
            "optype": "concat",
            "rules": [
                {
                    "cond": [
                        "self.params[axis] == 0",
                        "ln_tensorrt_version_cmp(\"4.0.0\") < 0 && self.ins[src1].ndim < 4 && self.params[axis] != 1",
                        "ln_tensorrt_version_cmp(\"4.0.0\") < 0 && self.ins[src1].ndim >= 4 && self.params[axis] != self.ins[src1].ndim - 3"
                    ],
                    "replace": ["concat_cuda"]
                },
                {
                    "cond": ["ln_tensorrt_version_cmp(\"4.0.0\") < 0"],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src1]",
                        "trt.ins[src$@] = self.ins[src2]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[dst$^_shape] = self.outs[dst].dims",
                        "trt.params[dst$^_dtype] = ${type(char *) tl_dtype_name(${rh self.outs[dst].dtype})}",
                        "trt.params[op$@] = \"concat\"",
                        "trt.params[op$^_src1] = self.ins[src1]",
                        "trt.params[op$^_src2] = self.ins[src2]",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[batch_size] = self.ins[src1].dims[0]"
                    ]
                },
                {
                    "cond": [],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src1]",
                        "trt.ins[src$@] = self.ins[src2]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[dst$^_shape] = self.outs[dst].dims",
                        "trt.params[dst$^_dtype] = ${type(char *) tl_dtype_name(${rh self.outs[dst].dtype})}",
                        "trt.params[op$@] = \"concat\"",
                        "trt.params[op$^_src1] = self.ins[src1]",
                        "trt.params[op$^_src2] = self.ins[src2]",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[op$^_axis] = self.params[axis]",
                        "trt.params[batch_size] = self.ins[src1].dims[0]"
                    ]
                }
            ]
        },
        {
            "optype": "batchnorm",
            "rules": [
                {
                    "cond": [],
                    "replace": ["bn2scale_wts_cpu bwc", "tensorrt trt"],
                    "details": [
                        "bwc.ins[src_mean] = self.ins[mean]",
                        "bwc.ins[src_var] = self.ins[var]",
                        "bwc.ins[src_scale] = self.ins[scale]",
                        "bwc.ins[src_offset] = self.ins[offset]",
                        "bwc.params[epsilon] = self.params[epsilon]",

                        "trt.ins[src$@] = self.ins[src]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[dst$^_shape] = self.outs[dst].dims",
                        "trt.params[dst$^_dtype] = ${type(char *) tl_dtype_name(${rh self.outs[dst].dtype})}",
                        "trt.ins[weight$@] = bwc.outs[dst_shift]",
                        "trt.ins[weight$@] = bwc.outs[dst_scale]",
                        "trt.ins[weight$@] = bwc.outs[dst_power]",
                        "trt.params[op$@] = \"scale\"",
                        "trt.params[op$^_src] = self.ins[src]",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[op$^_shift] = bwc.outs[dst_shift]",
                        "trt.params[op$^_scale] = bwc.outs[dst_scale]",
                        "trt.params[op$^_power] = bwc.outs[dst_power]",
                        "trt.params[op$^_scale_mode] = \"kCHANNEL\"",
                        "trt.params[batch_size] = self.ins[src].dims[0]",
                    ]
                }
            ]
        },
        {
            "optype": "elew",
            "rules": [
                {
                    "cond": [],
                    "replace": ["tensorrt trt"],
                    "details": [
                        "trt.ins[src$@] = self.ins[src1]",
                        "trt.ins[src$@] = self.ins[src2]",
                        "trt.outs[dst$@] = self.outs[dst]",
                        "trt.params[dst$^_shape] = self.outs[dst].dims",
                        "trt.params[dst$^_dtype] = ${type(char *) tl_dtype_name(${rh self.outs[dst].dtype})}",
                        "trt.params[op$@] = \"elew\"",
                        "trt.params[op$^_src1] = self.ins[src1]",
                        "trt.params[op$^_src2] = self.ins[src2]",
                        "trt.params[op$^_dst] = self.outs[dst]",
                        "trt.params[op$^_elew_type] = ${type(char *) ln_tensorrt_elew_name(${rh self.params[elew_op]})}",
                        "trt.params[batch_size] = self.ins[src1].dims[0]",
                    ]
                }
            ]
        },
        {
            "optype": "maxreduce",
            "rules": [
                {
                    "cond": [],
                    "replace": ["maxreduce_cuda"]
                }
            ]
        },
        {
            "optype": "maxreduce_arg",
            "rules": [
                {
                    "cond": [],
                    "replace": ["maxreduce_arg_cuda"]
                }
            ]
        },
        {
            "optype": "slice",
            "rules": [
                {
                    "cond": [],
                    "replace": ["slice_cuda"]
                }
            ]
        },
        {
            "optype": "transpose",
            "rules": [
                {
                    "cond": [],
                    "replace": ["transpose_cuda"]
                }
            ]
        },
        {
            "optype": "upsample",
            "rules": [
                {
                    "cond": [],
                    "replace": ["upsample_cuda"]
                }
            ]
        },
        {
            "optype": "zeros",
            "rules": [
                {
                    "cond": [],
                    "replace": ["zeros_cuda"]
                }
            ]
        },
        {
            "optype": "reshape",
            "rules": [
                {
                    "cond": [],
                    "replace": ["reshape_cuda"]
                }
            ]
        },
        {
            "optype": "print",
            "rules": [
                {
                    "cond": ["self.ins[src].mtype == LN_MEM_CPU"],
                    "replace": ["print_cpu"]
                },
                {
                    "cond": ["self.ins[src].mtype == LN_MEM_CUDA"],
                    "replace": ["print_cuda"]
                },
                {
                    "cond": [],
                    "err": "print's src is either of LN_MEM_CPU or LN_MEM_CUDA"
                }
            ]
        },
        {
            "optype": "fprint",
            "rules": [
                {
                    "cond": ["self.ins[src].mtype == LN_MEM_CPU"],
                    "replace": ["fprint_cpu"]
                },
                {
                    "cond": ["self.ins[src].mtype == LN_MEM_CUDA"],
                    "replace": ["fprint_cuda"]
                },
                {
                    "cond": [],
                    "err": "fprint's src is either of LN_MEM_CPU or LN_MEM_CUDA"
                }
            ]
        },
        {
            "optype": "sort1d",
            "rules": [
                {
                    "cond": [],
                    "replace": ["sort1d_cuda"]
                }
            ]
        },
        {
            "optype": "sort1d_by_key",
            "rules": [
                {
                    "cond": [],
                    "replace": ["sort1d_by_key_cuda"]
                }
            ]
        },
        {
            "optype": "arange",
            "rules": [
                {
                    "cond": [],
                    "replace": ["arange_cuda"]
                }
            ]
        },
        {
            "optype": "rearange",
            "rules": [
                {
                    "cond": [],
                    "replace": ["rearange_cuda"]
                }
            ]
        },
        {
            "optype": "transform_bboxSQD",
            "rules": [
                {
                    "cond": [],
                    "replace": ["transform_bboxSQD_cuda"]
                }
            ]
        },
        {
            "optype": "pick1d",
            "rules": [
                {
                    "cond": [],
                    "replace": ["pick1d_cuda"]
                }
            ]
        },
        {
            "optype": "detect_yolov3",
            "rules": [
                {
                    "cond": [],
                    "replace": ["detect_yolov3_cuda"]
                }
            ]
        },
        {
            "optype": "tensorrt",
            "rules": [
                {
                    "cond": [],
                    "match": false
                }
            ]
        }
    ]
}
